{"ast":null,"code":"import { call, put, all, takeLatest } from 'redux-saga/effects';\nimport api from '../../../services/api';\nimport { formatPrice } from '../../../util/format';\nimport { addToCartSuccess } from './actions';\n\nfunction* addToCart({\n  id\n}) {\n  const productsExists = yield select(state => state.cart.find(p => p.id === id));\n\n  if (productsExists >= 0) {} else {\n    const response = yield call(api.get, `/products/${id}`);\n    const data = { ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price)\n    };\n    yield put(addToCartSuccess(data));\n  }\n}\n\nexport default all([takeLatest('@cart/ADD_REQUEST', addToCart)]);","map":{"version":3,"sources":["/Users/kleytonsolinho/www/gostack10/modulo07/src/store/modules/cart/sagas.js"],"names":["call","put","all","takeLatest","api","formatPrice","addToCartSuccess","addToCart","id","productsExists","select","state","cart","find","p","response","get","data","amount","priceFormatted","price"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AAEA,OAAOC,GAAP,MAAgB,uBAAhB;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,SAASC,gBAAT,QAAiC,WAAjC;;AAEA,UAAUC,SAAV,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA4B;AAC1B,QAAMC,cAAc,GAAG,MAAMC,MAAM,CACjCC,KAAK,IAAIA,KAAK,CAACC,IAAN,CAAWC,IAAX,CAAgBC,CAAC,IAAIA,CAAC,CAACN,EAAF,KAASA,EAA9B,CADwB,CAAnC;;AAIA,MAAIC,cAAc,IAAI,CAAtB,EAAyB,CAExB,CAFD,MAEO;AACL,UAAMM,QAAQ,GAAG,MAAMf,IAAI,CAACI,GAAG,CAACY,GAAL,EAAW,aAAYR,EAAG,EAA1B,CAA3B;AAEA,UAAMS,IAAI,GAAG,EACX,GAAGF,QAAQ,CAACE,IADD;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXC,MAAAA,cAAc,EAAEd,WAAW,CAACU,QAAQ,CAACE,IAAT,CAAcG,KAAf;AAHhB,KAAb;AAMA,UAAMnB,GAAG,CAACK,gBAAgB,CAACW,IAAD,CAAjB,CAAT;AACD;AAGF;;AAED,eAAef,GAAG,CAAC,CACjBC,UAAU,CAAC,mBAAD,EAAsBI,SAAtB,CADO,CAAD,CAAlB","sourcesContent":["import { call, put, all, takeLatest } from 'redux-saga/effects';\n\nimport api from '../../../services/api';\nimport { formatPrice } from '../../../util/format';\n\nimport { addToCartSuccess } from './actions';\n\nfunction* addToCart({ id }) {\n  const productsExists = yield select(\n    state => state.cart.find(p => p.id === id),\n  )\n\n  if (productsExists >= 0) {\n\n  } else {\n    const response = yield call(api.get, `/products/${id}`);\n\n    const data = {\n      ...response.data,\n      amount: 1,\n      priceFormatted: formatPrice(response.data.price),\n    }\n\n    yield put(addToCartSuccess(data));\n  }\n\n\n}\n\nexport default all([\n  takeLatest('@cart/ADD_REQUEST', addToCart),\n]);\n"]},"metadata":{},"sourceType":"module"}